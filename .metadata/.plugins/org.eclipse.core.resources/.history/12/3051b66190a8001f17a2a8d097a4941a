package com.cg.controller;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cg.dto.OrderDTO;
import com.cg.dto.UserDTO;
import com.cg.model.Order;
import com.cg.model.User;
import com.cg.service.IOrderService;

import jakarta.validation.Valid;

@RequestMapping("/apis1")
@RestController
public class OrderController {
	@Autowired
	IOrderService orderservice;
	
	@GetMapping("/orders")
	public List<Order> getOrders(){
		return orderservice.findAll();	
	}
	
	@GetMapping("/orders1")
	public List<OrderDTO> getAllOrders(){
		return orderservice.findAll()
				           .stream()
				           .map(OrderDTO :: fromEntity)
				           .collect(Collectors.toList());
	}
	
	@GetMapping("/orders/{id}")
	public Optional<Order> findOrderById(@PathVariable int id){
		return orderservice.findOrderById(id);	
	}
	
	@GetMapping("/orders2/{id}")
    public List<OrderDTO> getOrderById(@PathVariable int id) {
        return orderservice.findOrderById(id)
                            .stream()
                            .map(OrderDTO::fromEntity)  // Convert to ProductDTO
                            .collect(Collectors.toList());
    }
	
	@PostMapping("/orders")
	public Order createOrder(@Valid @RequestBody Order o) {
		return orderservice.createOrder(o);
	}
	
	@PostMapping("/orders2")
	public OrderDTO createOrderDto(@Valid @RequestBody OrderDTO orderdto){
		Order order=orderdto.toEntity();
		Order createdOrder=orderservice.createOrder(order);
		return OrderDTO.fromEntity(createdOrder);
	}
	
	@DeleteMapping("/orders/{id}")
	public String deleteOrderById(@PathVariable int id) {
		return orderservice.deleteOrderById(id);
	}
	
	@DeleteMapping("/delete/{id}")
	public OrderDTO deleteOrders(@PathVariable int id){
		 Order order = orderservice.findOrderById(id)
                 .orElseThrow(() -> new RuntimeException("User not found"));
		 OrderDTO orderDTO = OrderDTO.fromEntity(order);
		 orderservice.deleteOrderById(id);
		 return orderDTO;
				      
	}
	
	@PutMapping("/orders")
	public Order updateOrder(@RequestBody Order o) {
		return orderservice.updateOrder(o);
	}
	
	@PutMapping("/update1")
    public OrderDTO updateUser(@RequestBody OrderDTO orderDTO) {
        Order order = orderDTO.toEntity();
        Order updatedOrder = orderservice.updateOrder(order);
        return OrderDTO.fromEntity(updatedOrder);
    }
}
