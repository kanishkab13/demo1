package com.cg.controller;

import java.util.List;
import java.util.Optional;

import org.apache.coyote.BadRequestException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cg.exception.ResourceNotFoundException;
import com.cg.model.Order;
import com.cg.service.IOrderService;

import jakarta.validation.Valid;

@RequestMapping("/api/ord")
@RestController
public class OrderController {
	@Autowired
	IOrderService orderservice;
	
	@Autowired
	OrderFeignClient orderfc;
	
	@GetMapping("/order")
	public List<Order> getOrders(){
		return orderservice.findAll();	
	}
	
	
	@GetMapping("/orders/{id}")
	public Optional<Order> findOrderById(@Valid @PathVariable int id) throws ResourceNotFoundException{
		Optional<Order> order=orderservice.findOrderById(id);
		order.orElseThrow(() -> new ResourceNotFoundException("Order not found for this id :: " + id));
    	System.out.println(id);
		return orderservice.findOrderById(id);	
	}
	
	
	@PostMapping("/order")
	public Order createOrder(@Valid @RequestBody Order o) throws BadRequestException {
		if(o.getOrderid() <=100 || o.getOrderdate() == " " || o.getOrderno() == " ") {
			throw new BadRequestException("Invalid order details");
		}
		return orderservice.createOrder(o);
	}
	
	
	@DeleteMapping("/orders/{id}")
	public String deleteOrderById(@Valid @PathVariable int id) throws ResourceNotFoundException {
		String r= orderservice.deleteOrderById(id);
		if(r== null ||r.isEmpty()) {
			throw new ResourceNotFoundException("Order not found with id"+id);
		}
		return r;
	}
	
	
	@PutMapping("/orders")
	public Order updateOrder(@Valid @RequestBody Order o) throws BadRequestException {
		if(o.getOrderid() <=100 || o.getOrderdate() == " " || o.getOrderno() == " ") {
			throw new BadRequestException("Invalid order details");
		}
		return orderservice.updateOrder(o);
	}
	
	@GetMapping("/allprod") //http://localhost:7100/api/dept/allprod
	public  ResponseEntity<String> getEmployees() {
	 return ResponseEntity.ok().body(orderfc.productresponse());
	}	
}
	
	
}
